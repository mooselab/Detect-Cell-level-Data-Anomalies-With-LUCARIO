{
    "constraint_suggestions": [
        {
            "constraint_name": "CompletenessConstraint(Completeness(zip,None))",
            "column_name": "zip",
            "current_value": "Completeness: 1.0",
            "description": "'zip' is not null",
            "suggesting_rule": "CompleteIfCompleteRule()",
            "rule_description": "If a column is complete in the sample, we suggest a NOT NULL constraint",
            "code_for_constraint": ".isComplete(\"zip\")"
        },
        {
            "constraint_name": "ComplianceConstraint(Compliance('zip' has no negative values,zip >= 0,None))",
            "column_name": "zip",
            "current_value": "Minimum: 20856.0",
            "description": "'zip' has no negative values",
            "suggesting_rule": "NonNegativeNumbersRule()",
            "rule_description": "If we see only non-negative numbers in a column, we suggest a corresponding constraint",
            "code_for_constraint": ".isNonNegative(\"zip\")"
        },
        {
            "constraint_name": "CompletenessConstraint(Completeness(state,None))",
            "column_name": "state",
            "current_value": "Completeness: 1.0",
            "description": "'state' is not null",
            "suggesting_rule": "CompleteIfCompleteRule()",
            "rule_description": "If a column is complete in the sample, we suggest a NOT NULL constraint",
            "code_for_constraint": ".isComplete(\"state\")"
        },
        {
            "constraint_name": "CompletenessConstraint(Completeness(score,None))",
            "column_name": "score",
            "current_value": "Completeness: 1.0",
            "description": "'score' is not null",
            "suggesting_rule": "CompleteIfCompleteRule()",
            "rule_description": "If a column is complete in the sample, we suggest a NOT NULL constraint",
            "code_for_constraint": ".isComplete(\"score\")"
        },
        {
            "constraint_name": "ComplianceConstraint(Compliance('score' has value range '100%', 'NULL', '97%', '98%', '99%', '96%', '95%', '94%', '90%', '93%', '92%', '91%', '89%', '88%', '87%', '85%', '83%', '0%', '67%', '80%', '82%', '50%', '86%' for at least 88.0% of values,`score` IN ('100%', 'NULL', '97%', '98%', '99%', '96%', '95%', '94%', '90%', '93%', '92%', '91%', '89%', '88%', '87%', '85%', '83%', '0%', '67%', '80%', '82%', '50%', '86%'),None))",
            "column_name": "score",
            "current_value": "Compliance: 0.9069069069069069",
            "description": "'score' has value range '100%', 'NULL', '97%', '98%', '99%', '96%', '95%', '94%', '90%', '93%', '92%', '91%', '89%', '88%', '87%', '85%', '83%', '0%', '67%', '80%', '82%', '50%', '86%' for at least 88.0% of values",
            "suggesting_rule": "FractionalCategoricalRangeRule(0.9,com.amazon.deequ.suggestions.rules.FractionalCategoricalRangeRule$$$Lambda$2804/1672449753@50fec983)",
            "rule_description": "If we see a categorical range for most values in a column, we suggest an IS IN (...) constraint that should hold for most values",
            "code_for_constraint": ".isContainedIn(\"score\", [\"100%\", \"NULL\", \"97%\", \"98%\", \"99%\", \"96%\", \"95%\", \"94%\", \"90%\", \"93%\", \"92%\", \"91%\", \"89%\", \"88%\", \"87%\", \"85%\", \"83%\", \"0%\", \"67%\", \"80%\", \"82%\", \"50%\", \"86%\"], lambda x: x >= 0.88, \"It should be above 0.88!\")"
        },
        {
            "constraint_name": "CompletenessConstraint(Completeness(stateavg,None))",
            "column_name": "stateavg",
            "current_value": "Completeness: 1.0",
            "description": "'stateavg' is not null",
            "suggesting_rule": "CompleteIfCompleteRule()",
            "rule_description": "If a column is complete in the sample, we suggest a NOT NULL constraint",
            "code_for_constraint": ".isComplete(\"stateavg\")"
        },
        {
            "constraint_name": "CompletenessConstraint(Completeness(sample,None))",
            "column_name": "sample",
            "current_value": "Completeness: 1.0",
            "description": "'sample' is not null",
            "suggesting_rule": "CompleteIfCompleteRule()",
            "rule_description": "If a column is complete in the sample, we suggest a NOT NULL constraint",
            "code_for_constraint": ".isComplete(\"sample\")"
        },
        {
            "constraint_name": "ComplianceConstraint(Compliance('mc' has value range 'AMI-2', 'AMI-3', 'AMI-5', 'AMI-4', 'HF-1', 'HF-3', 'AMI-1', 'SCIP-INF-1', 'SCIP-CARD-2', 'HF-2', 'HF-4', 'PN-5C', 'AMI-7A', 'SCIP-INF-2', 'PN-2', 'PN-4', 'PN-3B', 'PN-6', 'AMI-8A', 'SCIP-VTE-2', 'PN-7', 'SCIP-INF-4', 'SCIP-INF-3', 'SCIP-VTE-1', 'SCIP-INF-6', 'CAC-2', 'CAC-3', 'CAC-1',`mc` IN ('AMI-2', 'AMI-3', 'AMI-5', 'AMI-4', 'HF-1', 'HF-3', 'AMI-1', 'SCIP-INF-1', 'SCIP-CARD-2', 'HF-2', 'HF-4', 'PN-5C', 'AMI-7A', 'SCIP-INF-2', 'PN-2', 'PN-4', 'PN-3B', 'PN-6', 'AMI-8A', 'SCIP-VTE-2', 'PN-7', 'SCIP-INF-4', 'SCIP-INF-3', 'SCIP-VTE-1', 'SCIP-INF-6', 'CAC-2', 'CAC-3', 'CAC-1'),None))",
            "column_name": "mc",
            "current_value": "Compliance: 1",
            "description": "'mc' has value range 'AMI-2', 'AMI-3', 'AMI-5', 'AMI-4', 'HF-1', 'HF-3', 'AMI-1', 'SCIP-INF-1', 'SCIP-CARD-2', 'HF-2', 'HF-4', 'PN-5C', 'AMI-7A', 'SCIP-INF-2', 'PN-2', 'PN-4', 'PN-3B', 'PN-6', 'AMI-8A', 'SCIP-VTE-2', 'PN-7', 'SCIP-INF-4', 'SCIP-INF-3', 'SCIP-VTE-1', 'SCIP-INF-6', 'CAC-2', 'CAC-3', 'CAC-1'",
            "suggesting_rule": "CategoricalRangeRule(com.amazon.deequ.suggestions.rules.CategoricalRangeRule$$$Lambda$2803/1286462517@6efb6f41)",
            "rule_description": "If we see a categorical range for a column, we suggest an IS IN (...) constraint",
            "code_for_constraint": ".isContainedIn(\"mc\", [\"AMI-2\", \"AMI-3\", \"AMI-5\", \"AMI-4\", \"HF-1\", \"HF-3\", \"AMI-1\", \"SCIP-INF-1\", \"SCIP-CARD-2\", \"HF-2\", \"HF-4\", \"PN-5C\", \"AMI-7A\", \"SCIP-INF-2\", \"PN-2\", \"PN-4\", \"PN-3B\", \"PN-6\", \"AMI-8A\", \"SCIP-VTE-2\", \"PN-7\", \"SCIP-INF-4\", \"SCIP-INF-3\", \"SCIP-VTE-1\", \"SCIP-INF-6\", \"CAC-2\", \"CAC-3\", \"CAC-1\"])"
        },
        {
            "constraint_name": "CompletenessConstraint(Completeness(mc,None))",
            "column_name": "mc",
            "current_value": "Completeness: 1.0",
            "description": "'mc' is not null",
            "suggesting_rule": "CompleteIfCompleteRule()",
            "rule_description": "If a column is complete in the sample, we suggest a NOT NULL constraint",
            "code_for_constraint": ".isComplete(\"mc\")"
        },
        {
            "constraint_name": "ComplianceConstraint(Compliance('mc' has value range 'AMI-2', 'AMI-3', 'AMI-5', 'AMI-4', 'HF-1', 'HF-3', 'AMI-1', 'SCIP-INF-1', 'SCIP-CARD-2', 'HF-2', 'HF-4', 'PN-5C', 'AMI-7A', 'SCIP-INF-2', 'PN-2', 'PN-4', 'PN-3B', 'PN-6', 'AMI-8A', 'SCIP-VTE-2', 'PN-7', 'SCIP-INF-4' for at least 89.0% of values,`mc` IN ('AMI-2', 'AMI-3', 'AMI-5', 'AMI-4', 'HF-1', 'HF-3', 'AMI-1', 'SCIP-INF-1', 'SCIP-CARD-2', 'HF-2', 'HF-4', 'PN-5C', 'AMI-7A', 'SCIP-INF-2', 'PN-2', 'PN-4', 'PN-3B', 'PN-6', 'AMI-8A', 'SCIP-VTE-2', 'PN-7', 'SCIP-INF-4'),None))",
            "column_name": "mc",
            "current_value": "Compliance: 0.9089089089089092",
            "description": "'mc' has value range 'AMI-2', 'AMI-3', 'AMI-5', 'AMI-4', 'HF-1', 'HF-3', 'AMI-1', 'SCIP-INF-1', 'SCIP-CARD-2', 'HF-2', 'HF-4', 'PN-5C', 'AMI-7A', 'SCIP-INF-2', 'PN-2', 'PN-4', 'PN-3B', 'PN-6', 'AMI-8A', 'SCIP-VTE-2', 'PN-7', 'SCIP-INF-4' for at least 89.0% of values",
            "suggesting_rule": "FractionalCategoricalRangeRule(0.9,com.amazon.deequ.suggestions.rules.FractionalCategoricalRangeRule$$$Lambda$2804/1672449753@50fec983)",
            "rule_description": "If we see a categorical range for most values in a column, we suggest an IS IN (...) constraint that should hold for most values",
            "code_for_constraint": ".isContainedIn(\"mc\", [\"AMI-2\", \"AMI-3\", \"AMI-5\", \"AMI-4\", \"HF-1\", \"HF-3\", \"AMI-1\", \"SCIP-INF-1\", \"SCIP-CARD-2\", \"HF-2\", \"HF-4\", \"PN-5C\", \"AMI-7A\", \"SCIP-INF-2\", \"PN-2\", \"PN-4\", \"PN-3B\", \"PN-6\", \"AMI-8A\", \"SCIP-VTE-2\", \"PN-7\", \"SCIP-INF-4\"], lambda x: x >= 0.89, \"It should be above 0.89!\")"
        },
        {
            "constraint_name": "CompletenessConstraint(Completeness(phone,None))",
            "column_name": "phone",
            "current_value": "Completeness: 1.0",
            "description": "'phone' is not null",
            "suggesting_rule": "CompleteIfCompleteRule()",
            "rule_description": "If a column is complete in the sample, we suggest a NOT NULL constraint",
            "code_for_constraint": ".isComplete(\"phone\")"
        }
    ]
}