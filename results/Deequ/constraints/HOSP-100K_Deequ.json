{
    "constraint_suggestions": [
        {
            "constraint_name": "ComplianceConstraint(Compliance('zip' has no negative values,zip >= 0,None))",
            "column_name": "zip",
            "current_value": "Minimum: 603.0",
            "description": "'zip' has no negative values",
            "suggesting_rule": "NonNegativeNumbersRule()",
            "rule_description": "If we see only non-negative numbers in a column, we suggest a corresponding constraint",
            "code_for_constraint": ".isNonNegative(\"zip\")"
        },
        {
            "constraint_name": "CompletenessConstraint(Completeness(zip,None))",
            "column_name": "zip",
            "current_value": "Completeness: 0.99999",
            "description": "'zip' has less than 1% missing values",
            "suggesting_rule": "RetainCompletenessRule()",
            "rule_description": "If a column is incomplete in the sample, we model its completeness as a binomial variable, estimate a confidence interval and use this to define a lower bound for the completeness",
            "code_for_constraint": ".hasCompleteness(\"zip\", lambda x: x >= 0.99, \"It should be above 0.99!\")"
        },
        {
            "constraint_name": "CompletenessConstraint(Completeness(state,None))",
            "column_name": "state",
            "current_value": "Completeness: 1.0",
            "description": "'state' is not null",
            "suggesting_rule": "CompleteIfCompleteRule()",
            "rule_description": "If a column is complete in the sample, we suggest a NOT NULL constraint",
            "code_for_constraint": ".isComplete(\"state\")"
        },
        {
            "constraint_name": "ComplianceConstraint(Compliance('score' has value range 'NULL', '100%', '99%', '98%', '97%', '96%', '95%', '94%', '93%', '92%', '91%', '90%', '89%', '88%', '86%', '0%', '87%', '83%', '85%', '80%', '50%', '67%', '84%', '82%', '75%', '81%', '79%', '78%', '76%', '77%', '71%', '73%', '74%', '70%', '60%', '33%', '72%', '62%', '68%', '69%', '64%', '65%', '57%', '40%', '59%', '56%', '25%', '66%', '63%', '61%', '58%', '43%', '55%', '53%', '38%', '52%', '44%', '54%', '29%', '45%', '20%', '36%', '47%', '46%', '41%', '42%', '48%', '27%', '17%', '14%', '30%', '22%', '35%', '49%', '37%', '11%', '31%', '39%', '51%', '24%', '26%', '32%', '8%', '7%', '5%', '10%', '21%', '18%', '19%', '9%', '16%', '12%', '34%', '6%', '15%', '28%', '23%', '3%', '13%', '2%', '4%', '1%',`score` IN ('NULL', '100%', '99%', '98%', '97%', '96%', '95%', '94%', '93%', '92%', '91%', '90%', '89%', '88%', '86%', '0%', '87%', '83%', '85%', '80%', '50%', '67%', '84%', '82%', '75%', '81%', '79%', '78%', '76%', '77%', '71%', '73%', '74%', '70%', '60%', '33%', '72%', '62%', '68%', '69%', '64%', '65%', '57%', '40%', '59%', '56%', '25%', '66%', '63%', '61%', '58%', '43%', '55%', '53%', '38%', '52%', '44%', '54%', '29%', '45%', '20%', '36%', '47%', '46%', '41%', '42%', '48%', '27%', '17%', '14%', '30%', '22%', '35%', '49%', '37%', '11%', '31%', '39%', '51%', '24%', '26%', '32%', '8%', '7%', '5%', '10%', '21%', '18%', '19%', '9%', '16%', '12%', '34%', '6%', '15%', '28%', '23%', '3%', '13%', '2%', '4%', '1%'),None))",
            "column_name": "score",
            "current_value": "Compliance: 1",
            "description": "'score' has value range 'NULL', '100%', '99%', '98%', '97%', '96%', '95%', '94%', '93%', '92%', '91%', '90%', '89%', '88%', '86%', '0%', '87%', '83%', '85%', '80%', '50%', '67%', '84%', '82%', '75%', '81%', '79%', '78%', '76%', '77%', '71%', '73%', '74%', '70%', '60%', '33%', '72%', '62%', '68%', '69%', '64%', '65%', '57%', '40%', '59%', '56%', '25%', '66%', '63%', '61%', '58%', '43%', '55%', '53%', '38%', '52%', '44%', '54%', '29%', '45%', '20%', '36%', '47%', '46%', '41%', '42%', '48%', '27%', '17%', '14%', '30%', '22%', '35%', '49%', '37%', '11%', '31%', '39%', '51%', '24%', '26%', '32%', '8%', '7%', '5%', '10%', '21%', '18%', '19%', '9%', '16%', '12%', '34%', '6%', '15%', '28%', '23%', '3%', '13%', '2%', '4%', '1%'",
            "suggesting_rule": "CategoricalRangeRule(com.amazon.deequ.suggestions.rules.CategoricalRangeRule$$$Lambda$2820/132128006@387458ba)",
            "rule_description": "If we see a categorical range for a column, we suggest an IS IN (...) constraint",
            "code_for_constraint": ".isContainedIn(\"score\", [\"NULL\", \"100%\", \"99%\", \"98%\", \"97%\", \"96%\", \"95%\", \"94%\", \"93%\", \"92%\", \"91%\", \"90%\", \"89%\", \"88%\", \"86%\", \"0%\", \"87%\", \"83%\", \"85%\", \"80%\", \"50%\", \"67%\", \"84%\", \"82%\", \"75%\", \"81%\", \"79%\", \"78%\", \"76%\", \"77%\", \"71%\", \"73%\", \"74%\", \"70%\", \"60%\", \"33%\", \"72%\", \"62%\", \"68%\", \"69%\", \"64%\", \"65%\", \"57%\", \"40%\", \"59%\", \"56%\", \"25%\", \"66%\", \"63%\", \"61%\", \"58%\", \"43%\", \"55%\", \"53%\", \"38%\", \"52%\", \"44%\", \"54%\", \"29%\", \"45%\", \"20%\", \"36%\", \"47%\", \"46%\", \"41%\", \"42%\", \"48%\", \"27%\", \"17%\", \"14%\", \"30%\", \"22%\", \"35%\", \"49%\", \"37%\", \"11%\", \"31%\", \"39%\", \"51%\", \"24%\", \"26%\", \"32%\", \"8%\", \"7%\", \"5%\", \"10%\", \"21%\", \"18%\", \"19%\", \"9%\", \"16%\", \"12%\", \"34%\", \"6%\", \"15%\", \"28%\", \"23%\", \"3%\", \"13%\", \"2%\", \"4%\", \"1%\"])"
        },
        {
            "constraint_name": "CompletenessConstraint(Completeness(score,None))",
            "column_name": "score",
            "current_value": "Completeness: 1.0",
            "description": "'score' is not null",
            "suggesting_rule": "CompleteIfCompleteRule()",
            "rule_description": "If a column is complete in the sample, we suggest a NOT NULL constraint",
            "code_for_constraint": ".isComplete(\"score\")"
        },
        {
            "constraint_name": "ComplianceConstraint(Compliance('score' has value range 'NULL', '100%', '99%', '98%', '97%', '96%', '95%', '94%', '93%', '92%', '91%', '90%', '89%', '88%', '86%', '0%', '87%', '83%', '85%', '80%', '50%', '67%' for at least 90.0% of values,`score` IN ('NULL', '100%', '99%', '98%', '97%', '96%', '95%', '94%', '93%', '92%', '91%', '90%', '89%', '88%', '86%', '0%', '87%', '83%', '85%', '80%', '50%', '67%'),None))",
            "column_name": "score",
            "current_value": "Compliance: 0.90189",
            "description": "'score' has value range 'NULL', '100%', '99%', '98%', '97%', '96%', '95%', '94%', '93%', '92%', '91%', '90%', '89%', '88%', '86%', '0%', '87%', '83%', '85%', '80%', '50%', '67%' for at least 90.0% of values",
            "suggesting_rule": "FractionalCategoricalRangeRule(0.9,com.amazon.deequ.suggestions.rules.FractionalCategoricalRangeRule$$$Lambda$2821/2088955039@efb111d)",
            "rule_description": "If we see a categorical range for most values in a column, we suggest an IS IN (...) constraint that should hold for most values",
            "code_for_constraint": ".isContainedIn(\"score\", [\"NULL\", \"100%\", \"99%\", \"98%\", \"97%\", \"96%\", \"95%\", \"94%\", \"93%\", \"92%\", \"91%\", \"90%\", \"89%\", \"88%\", \"86%\", \"0%\", \"87%\", \"83%\", \"85%\", \"80%\", \"50%\", \"67%\"], lambda x: x >= 0.9, \"It should be above 0.9!\")"
        },
        {
            "constraint_name": "CompletenessConstraint(Completeness(stateavg,None))",
            "column_name": "stateavg",
            "current_value": "Completeness: 1.0",
            "description": "'stateavg' is not null",
            "suggesting_rule": "CompleteIfCompleteRule()",
            "rule_description": "If a column is complete in the sample, we suggest a NOT NULL constraint",
            "code_for_constraint": ".isComplete(\"stateavg\")"
        },
        {
            "constraint_name": "CompletenessConstraint(Completeness(sample,None))",
            "column_name": "sample",
            "current_value": "Completeness: 1.0",
            "description": "'sample' is not null",
            "suggesting_rule": "CompleteIfCompleteRule()",
            "rule_description": "If a column is complete in the sample, we suggest a NOT NULL constraint",
            "code_for_constraint": ".isComplete(\"sample\")"
        },
        {
            "constraint_name": "ComplianceConstraint(Compliance('mc' has value range 'AMI-7A', 'AMI-8A', 'HF-1', 'HF-2', 'AMI-1', 'AMI-2', 'HF-3', 'AMI-3', 'AMI-5', 'AMI-4', 'HF-4', 'PN-2', 'PN-3B', 'PN-4', 'PN-5C', 'PN-6', 'PN-7', 'SCIP-CARD-2', 'SCIP-INF-1', 'SCIP-INF-3', 'SCIP-INF-2', 'SCIP-INF-4', 'SCIP-INF-6', 'SCIP-VTE-1', 'SCIP-VTE-2', 'CAC-1', 'CAC-2', 'CAC-3',`mc` IN ('AMI-7A', 'AMI-8A', 'HF-1', 'HF-2', 'AMI-1', 'AMI-2', 'HF-3', 'AMI-3', 'AMI-5', 'AMI-4', 'HF-4', 'PN-2', 'PN-3B', 'PN-4', 'PN-5C', 'PN-6', 'PN-7', 'SCIP-CARD-2', 'SCIP-INF-1', 'SCIP-INF-3', 'SCIP-INF-2', 'SCIP-INF-4', 'SCIP-INF-6', 'SCIP-VTE-1', 'SCIP-VTE-2', 'CAC-1', 'CAC-2', 'CAC-3'),None))",
            "column_name": "mc",
            "current_value": "Compliance: 1",
            "description": "'mc' has value range 'AMI-7A', 'AMI-8A', 'HF-1', 'HF-2', 'AMI-1', 'AMI-2', 'HF-3', 'AMI-3', 'AMI-5', 'AMI-4', 'HF-4', 'PN-2', 'PN-3B', 'PN-4', 'PN-5C', 'PN-6', 'PN-7', 'SCIP-CARD-2', 'SCIP-INF-1', 'SCIP-INF-3', 'SCIP-INF-2', 'SCIP-INF-4', 'SCIP-INF-6', 'SCIP-VTE-1', 'SCIP-VTE-2', 'CAC-1', 'CAC-2', 'CAC-3'",
            "suggesting_rule": "CategoricalRangeRule(com.amazon.deequ.suggestions.rules.CategoricalRangeRule$$$Lambda$2820/132128006@387458ba)",
            "rule_description": "If we see a categorical range for a column, we suggest an IS IN (...) constraint",
            "code_for_constraint": ".isContainedIn(\"mc\", [\"AMI-7A\", \"AMI-8A\", \"HF-1\", \"HF-2\", \"AMI-1\", \"AMI-2\", \"HF-3\", \"AMI-3\", \"AMI-5\", \"AMI-4\", \"HF-4\", \"PN-2\", \"PN-3B\", \"PN-4\", \"PN-5C\", \"PN-6\", \"PN-7\", \"SCIP-CARD-2\", \"SCIP-INF-1\", \"SCIP-INF-3\", \"SCIP-INF-2\", \"SCIP-INF-4\", \"SCIP-INF-6\", \"SCIP-VTE-1\", \"SCIP-VTE-2\", \"CAC-1\", \"CAC-2\", \"CAC-3\"])"
        },
        {
            "constraint_name": "CompletenessConstraint(Completeness(mc,None))",
            "column_name": "mc",
            "current_value": "Completeness: 1.0",
            "description": "'mc' is not null",
            "suggesting_rule": "CompleteIfCompleteRule()",
            "rule_description": "If a column is complete in the sample, we suggest a NOT NULL constraint",
            "code_for_constraint": ".isComplete(\"mc\")"
        },
        {
            "constraint_name": "ComplianceConstraint(Compliance('mc' has value range 'AMI-7A', 'AMI-8A', 'HF-1', 'HF-2', 'AMI-1', 'AMI-2', 'HF-3', 'AMI-3', 'AMI-5', 'AMI-4', 'HF-4', 'PN-2', 'PN-3B', 'PN-4', 'PN-5C', 'PN-6', 'PN-7', 'SCIP-CARD-2', 'SCIP-INF-1', 'SCIP-INF-3', 'SCIP-INF-2', 'SCIP-INF-4' for at least 90.0% of values,`mc` IN ('AMI-7A', 'AMI-8A', 'HF-1', 'HF-2', 'AMI-1', 'AMI-2', 'HF-3', 'AMI-3', 'AMI-5', 'AMI-4', 'HF-4', 'PN-2', 'PN-3B', 'PN-4', 'PN-5C', 'PN-6', 'PN-7', 'SCIP-CARD-2', 'SCIP-INF-1', 'SCIP-INF-3', 'SCIP-INF-2', 'SCIP-INF-4'),None))",
            "column_name": "mc",
            "current_value": "Compliance: 0.90951",
            "description": "'mc' has value range 'AMI-7A', 'AMI-8A', 'HF-1', 'HF-2', 'AMI-1', 'AMI-2', 'HF-3', 'AMI-3', 'AMI-5', 'AMI-4', 'HF-4', 'PN-2', 'PN-3B', 'PN-4', 'PN-5C', 'PN-6', 'PN-7', 'SCIP-CARD-2', 'SCIP-INF-1', 'SCIP-INF-3', 'SCIP-INF-2', 'SCIP-INF-4' for at least 90.0% of values",
            "suggesting_rule": "FractionalCategoricalRangeRule(0.9,com.amazon.deequ.suggestions.rules.FractionalCategoricalRangeRule$$$Lambda$2821/2088955039@efb111d)",
            "rule_description": "If we see a categorical range for most values in a column, we suggest an IS IN (...) constraint that should hold for most values",
            "code_for_constraint": ".isContainedIn(\"mc\", [\"AMI-7A\", \"AMI-8A\", \"HF-1\", \"HF-2\", \"AMI-1\", \"AMI-2\", \"HF-3\", \"AMI-3\", \"AMI-5\", \"AMI-4\", \"HF-4\", \"PN-2\", \"PN-3B\", \"PN-4\", \"PN-5C\", \"PN-6\", \"PN-7\", \"SCIP-CARD-2\", \"SCIP-INF-1\", \"SCIP-INF-3\", \"SCIP-INF-2\", \"SCIP-INF-4\"], lambda x: x >= 0.9, \"It should be above 0.9!\")"
        },
        {
            "constraint_name": "CompletenessConstraint(Completeness(phone,None))",
            "column_name": "phone",
            "current_value": "Completeness: 1.0",
            "description": "'phone' is not null",
            "suggesting_rule": "CompleteIfCompleteRule()",
            "rule_description": "If a column is complete in the sample, we suggest a NOT NULL constraint",
            "code_for_constraint": ".isComplete(\"phone\")"
        }
    ]
}